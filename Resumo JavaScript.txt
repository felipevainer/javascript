JavaScript 

- MÓDULO B
. Armazendo dados
. Tratamento de dados
. Operações com dados

window.alert() ou alert()     \\ Mostra um alerta na pagina que está sendo programada com a palavra ok embaixo.
window.confirm() ou confirm  \\ Mostra um alerta na pagina que está sendo programada com a palavra ok e cancel embaixo.
window.prompt() \\ Mostra um alerta na pagina que está sendo programada com algo para digitar e confimar ou cancelar embaixo.
document.write() \\ Escreve na tela da pagina.

- COMENTÁRIOS
//  Comentário de uma linha.
/* */ Comnetário de várias linhas.

NOMES DE VARIÁVEIS OU IDENTIFICADORES
° Podem começar com letra, $ ou _
° Não podem começar com números
° É possível usar letras ou números
° É possível usar acentos e símbolos
° Não podem conter espaços
° Não podem ser palavras reservadas

DICAS
° Maiúsculas e minúsculas fazem diferença
° Tente escolher nomes coerentes para as variáveis

DATA TYPES
 typeof
° number
       Infinity
       NaN
° string
° boolean
° null
° underfined
° object
       Array
° function

Ctrl + l // Limpa a tela do nodejs

STRING PARA NÚMERO
° Number.parseInt(x)
°Number.parseFloat(x)
°Number

NÚMERO PARA STRING
°String(x)
x.toString()
x.length // Comprimento da string
x.toUpperCase() // Joga para maiúscula
x.toLowerCase() // Joga para minúscula

x.toFixed(2) // Aumenta para duas casas decimais
x.toFixed(2).replace('.', ',') //Aumenta para duas casas decimais e troca o ponto por virgula
x.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'}) //Converção de moeda para real

OPERADORES 
° aritméticos
+
-
*
/
%
**
1.1 - Ordem de precedência
()
**
* / %
+ -

1.2 - Auto-Atribuição
var n = 3
n = n + 4

1.3 - Simplificando
n += 4

1.4 - Pós incremento e decremento
x++
x--

1.5 - Pré incremento e pré decremento
++x
--x

° atribuição
° relacionais
> maior que
< menor que
>= maior ou igual
<= nenor ou igual
== igual
!= diferente

1.6 - Identidade
5 == 5 true
5 == '5' true
5 === '5' false
5 !== '5' true

°lógicos
! não
&& e
|| ou

°ternário
teste?true:false
média >= 7 ? "aprovado" : "reprovado"

DOM (DOCUMENT OBJECT MODEL)
1.1 - Àrvore DOM
	window
location - document - history
	HTML
             head   body
         meta - title    h1 - p - div
	                  strong

window.document.write(window.navigator.appName) // Descubro o nome do navegador
window.document.write(window.documentr.charset) // Descubro a configuração das letras
window.document.write(window.document.URL) // Descubro a url do site

o dom pode ser selecionado por marca, id, nome, classe e seletor.
Marca - getElementsByTagName() ex: var p1 = window.document.getElementsByTagName('p')[0]  window.document.write('Está escrito assim: ' + p1.innerText) document.write(p1.innerHTML)
Id - getElementById() ex: 
Name - getElementsByName() ex:
Classe - getElementsByClassName()
seletor - querySelector() querySelectorAll()

EVENTOS DOM
mouseenter
mousedown
click
mousemove
mouseup
mouseout

a.addEventListener('click', clicar) // Função para acontecer um evento ao clicar em algo especifico

CONDIÇÕES
if(condição) {} else {}

var agora = new Date()                (Exemplo para pegar a hora atual da maquina)
var hora = agora.getHours()

switch(expressão){case valor1: break valor2: break  valor3:  break default:}      (Condição múltipla para testar dados pontuais)

document.createElement('img')  // Neste exemplo cria uma tag img atravez do JavaScript
img.setAttribute('id', 'foto') // Cria uma id para tag img chamada foto
res.appendChild(img) // O res foi criada como id e adiciona o filho img

REPETIÇÕES
while(condição){} // Estrutura de repetição com teste lógico no ínicio
do{} while(condição) // Estrutura de repetição com teste lógico no final
for(inicio; teste; incremento){} // Estrutura de repetição

ARRAY VARIÁVEIS COMPOSTAS
variáveis simples só conseguem armazenar um valor por vez. var n = 1
variáveis compostas devem ser capazes de armazenar vários valores em uma mesma estrutura. var n = [1, 2, 3, 4, 5, 6]
podemos adicionar mais elementos dentro do vetor.            var n[3] = 7             n.push(7)
Para saber o comprimento de um array.    n.length
Colocar os elementos em ordem crescente.    n.sort()
Para buscar um valor dentro do array.   n.indexOf(7)

exemplo:
let valores = [8, 1, 7, 4, 2, 9]						
for(let pos in valores){						
    console.log(`A posição ${pos} tem o valor ${valores[pos]}`)
}

let valores = [8, 1, 7, 4, 2, 9]
for(let pos = 0; pos < valores.length; pos++){
    console.log(`A posição ${pos} tem o valor ${valores[pos]}`)
}

FUNÇÕES
São ações executadas assim que são chamadas ou em decorrência de algum evento.



